\input texinfo.tex @c -*-texinfo-*-

@c Documentation for Emacs standoff-mode.

@setfilename standoff-en.info
@documentencoding UTF-8
@documentlanguage en

@include version.texi
@ifclear VERSION
@set VERSION
@end ifclear

@settitle Stand-Off Mode @value{VERSION} Manual (english)

@dircategory Emacs
@direntry
* Stand-Off Mode: (standoff-en).Creating stand-off markup. English manual.
@end direntry

@c semantic markup for this file
@alias emenu = samp @c menu entry
@alias markuptype = samp @c markup type
@alias markuplabel = samp @c markup label

@macro nsarb{TYPE}
@c @markuptype{http://beispiel.fernuni-hagen.de/ontologies/beispiel#\TYPE\}
@markuptype{http://arb.fernuni-hagen.de/owl/bsp#\TYPE\}
@end macro

@copying
Copyright @copyright{} 2015 Christian Lück

@quotation
Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.3 or
any later version published by the Free Software Foundation; with no
Invariant Sections, no Front-Cover Texts, and no Back-Cover Texts. A
copy of the license is included in the section entitled ``GNU Free
Documentation License.''
@end quotation
@end copying

@titlepage
@title Stand-Off Mode
@subtitle User Manual

@author Christian Lück

@c  The following two commands
@c  start the copyright page.
@page
@vskip 0pt plus 1filll
@insertcopying

@c Published by ...
@end titlepage

@c So the toc is printed at the start.
@contents

@ifnottex
@node Top, Introduction, (dir), (dir)
@top Stand-Off Mode

User Manual for Stand-Off Mode, version @value{VERSION}.

@insertcopying
@end ifnottex

@menu
* Introduction::
* Starting and quitting stand-off mode::
* Markup elements::
* Relations::
* Attributes::
* Comments::
* Configuration::
* GNU Free Documentation License::

@detailmenu
 --- The Detailed Node Listing ---

Introduction

* Stand-Off Markup::
* Character Offsets::
* This manual::

Starting and quitting stand-off mode

* Stand-Off Mode aktivieren::
* Lesbarkeit des Buffers::
* Speichern::
* Bereits früher erfasstes  Markup laden::

Markup elements

* Erfassen::
* Hervorheben und Ausblenden::
* Navigieren::
* Löschen::
* Diskontinuierliches Markup::

Relations

* Form::
* Erfassen: Relationen erfassen.
* Anzeigen: Relationen anzeigen.
* Löschen: Relationen löschen.

Attributes

* Literal-Attribut erfassen::
* Anzeigen: Attribute anzeigen.
* Löschen: Attribute löschen.

Configuration

@c TODO

@end detailmenu
@end menu

@node Introduction, Starting and quitting stand-off mode, Top, Top
@chapter Introduction

Standoff-mode turns Emacs into a tagger for annotating texts. In
contrast to internal markup, when creating stand-off markup, aka
external markup, no tags are inserted into the document. But the
annotations are stored somewhere else and refer the annotated file by
character offsets.

Standoff-mode lets you create different types of annotations: a)
@emph{markup elements}, i.e. passages or spans of your text, b)
@emph{relations}, which interrelate two such markup elements in a
directed fashion, c) @emph{Attributes} on markup elements, which are
key-value pairs, d) free text @emph{comments} on one (or more) markup
elements.

@menu
* Common terms::
* Character offsets::
* This manual::
@end menu


@node Common terms, Character offsets, , Introduction
@section Common terms

This manual makes use of some common terms regarding standoff markup.

@table @b

@item source document
That's the document, the external annotations refer to. It may be a
plain text file, but may also contain markup, e.g. XML-Tags.

@item internal markup
That's the markup, which is already contained in the source document,
e.g. the XML-Tags contained there.

@item stand-off markup / annotations
That's the markup, which exits beside the source document. Stand-Off
mode produces this kind of markup.

@item external document
That's a document, that contains stand-off annotations, which refer an
other document.

@item internalizing
That's a procedure, which adds external annotations into a source
document, e.g. by producing a (new) XML document. This is not done by
standoff-mode, but by an other tool. See
@url{http://github.com/lueck/standoff-tools}.

@item externalizing
That's a procedure, which extracts annotations from a document and
generates external markup from them.

@end table

See also
@url{http://www.tei-c.org/release/doc/tei-p5-doc/de/html/SA.html#SASO}
and @url{http://www.openannotation.org/spec/core/}.

@node Character offsets, This manual, Stand-off markup, Introduction
@section Character offsets

An @emph{external document} produced by stand-off mode looks like this:

@example
(setq standoff-markup-read-function-dumped
 (quote
  (("ac06be81-d86e-4fe5-b84e-4952b1e571c9"
    "http://beispiel.fernuni-hagen.de/ontologies/beispiel#beispiel"
    28095
    28100
    "Dante")
   ("a29ca667-0f99-4933-b0aa-8a7b1c1929e9"
    "http://beispiel.fernuni-hagen.de/ontologies/beispiel#konzept"
    28057
    28070
    "Große Dichter")
   ...)))

(setq standoff-source-md5-dumped "a2997fcd8c318048abf34889212c1982")
@end example

That's a representation of the external markup in so called
s-expressions, which is used by the dummy back-end which simply dumps
emacs lisp data into a file. There is also a JSON back-end. See @c TODO
for more info about representation formats and back-ends.

All text spans from the source document, that where annotated, make up a
list of markup elements, stored in the variable
@code{standoff-markup-read-function-dumped}. Each markup element is
delimited by paratheses and has positional arguments.

The first positional arguments is made from 32 letters and digits,
separted by '-' into 5 blocks, and is a universally unique identifier
(UUID) of the markup element.

The second positional argument, which has the form of a URI, gives the
type or class of the markup element. In the first case, it's a
``beispiel'' (german for ``example'') from the namespace
@code{http://beispiel.fernuni-hagen.de/ontologies/beispiel}, in the
second case it is ``konzept'' (german for ``term'') from the same
namespace.

The next two positional arguments give the @emph{charater offsets} of
the start and end of the text span in the source document. Here, the
annotated passage spans from character 28095 to 28100.

The fifth positional entry is the string from the source document, that
spans from the start to the end character offset. The latin capital
letter @code{D} in @code{Dante} has position 28095, the @code{e} in the
end of the name has position 28099.

Further down there is the checksum for the source document. The checksum
is calculated, when the document is opened. As soon as the source
document is changed, the checksum changes and stand-off mode alarms you
with an error, because the @emph{character offsets} are likely to be
incorrect now.

@node This manual, , Character offsets, Introduction
@section This manual

This manual is available in three formats: PDF, HTML, and info files,
which can be read using Emacs' info browser.

Throughout this manual, commands offered by stand-off mode are
represented like follows. 

@deffn Command standoff-display-manual
@kindex ?
(@kbd{?})  (@emenu{Stand-Off->Manual}) Open the manual for standoff
mode. There are manuals in two languages: english and german.  The
customization option @code{standoff-info-language} is used, to select a
language. If is set to ``de'', the german manual is opened. If it is
nil, then the @code{LANG} environment variable is evaluated.  When the
result of the evaluation is not ``de'', the english manual is opened.
@vindex standoff-info-language
@end deffn

You can call such a command in three ways. (1) Call it by name, (2) by
key code, (3) select it from the menu.  The name is given in the first
line right after the keyword Command.  Here, the command's name is
@code{standoff-display-manual}.  The key code is given in the first
parentheses, here it is @kbd{?}.  So you can call the manual by simply
pressing the @kbd{?} on your keyboard, provided that the current buffer
is in standoff mode.  The menu entry is given in the second parenthesis,
here it is the menu entry ``Manual'' in the menu ``Stand-Off''. 

In Emacs, to call a command by its name, type @kbd{M-x} followed by the
name of the command, and then type @kbd{@key{RET}} (=
@kbd{@key{Return}}). In short: @kbd{M-x commandname RET}.

For the key code @kbd{M-x}, hold down @kbd{@key{ALT}} and press
@key{x}. @kbd{@key{M-}} stands for Meta, which is the second modifier
key besides @kbd{@key{C-}} (= Control) in Emacs. (Alternatively, e.g. if
no @kbd{@key{ALT}}-key is present, you can press @kbd{@key{ESC}}
followed by @kbd{x}.) This sets focus on the minibuffer on the bottom
line of the Emacs windows, where you can type the command name. For more
information on the basics of Emacs,
@ifinfo
@xref{Top,,, emacs}, and especially @xref{User Input,,, emacs}.
@end ifinfo
@ifnotinfo
see @url{https://www.gnu.org/software/emacs/manual/emacs.html,GNU Emacs manual}.
@end ifnotinfo

The info reader of Emacs makes lots of good manuals available directly
in the editor.  Have a look at the Emacs tutorial or user manual for
basic handling of the editor.

@deffn Command info
@kindex C-h i
(@kbd{C-h i})  (@emenu{Help->More Manuals->All Other Manuals})  Browse
the list installed manuals. 
@end deffn


In standoff-mode, there are only a few commands, that have to be called
by name.  These are commands that could mess up your annotation data, so
you better know what you are doing.  Most other commands can either be
called by key combinations or from the menus.


@node Starting and quitting stand-off mode, Markup elements, Introduction, Top
@chapter Starting and quitting stand-off mode


@menu
* Activating stand-off mode::
* Readability of XML source documents::
* Saving annotations::
* Loading annotations::
@end menu


@node Activating stand-off mode, Readability of XML source documents, , Starting and quitting stand-off mode
@section Activating stand-off mode

@deffn Command standoff-mode
Activate standoff mode for the file displayed in the current buffer.
@end deffn

After opening a file, standoff mode can be activated by @kbd{M-x
standoff-mode @kbd{RET}}. See @xref{Stand-Off mode for files of a
specific type} to configure Emacs to always open files with a specific
suffix in standoff mode.

In standoff mode, the buffer is read-only. This absolutely makes sense,
because the external markup references spans of the source document by
character offsets. Modifying the source document would break these
character offsets.

If standoff mode is active, ``Stand-Off'' shows up in the modeline and
the menu @emenu{Stand-Off} is present (not present if minibuffer is
active).

Right after activating, standoff mode tries to load existing
annotations. Depending on the back-end, standoff mode loads the
annotations of a file in the same directory and with the same file name
as the source document, but with the additional suffix @code{.json}
(JSON file back-end), or @code{.dump.el} (dummy back-end).
@xref{Back-Ends}.

Be aware, that a back-end has to be configured, before standoff mode is
ready to be used.

@node Readability of XML source documents, Performance, Activating stand-off mode, Starting and quitting stand-off mode
@section Readability of XML source documents

XML-Files often aren't friendly to the user's eye. Readability can be
improved by hiding XML tags like @code{<p>}. Also character references
of the form @code{&#xNNNN;} can be substituted with the corresponding
glyphs.

@deffn Command standoff-xml-tags-invisible
(@emenu{Stand-Off->Hide/Show XML-tags})  Hide XML tags when they are
visible, show them, when they are invisible.
@end deffn

@deffn Command standoff-xml-toggle-char-ref-glyph-substitute
(@emenu{Stand-Off->Substitute character references with glyphs})  Replace
XML character references with the corresponding glyph.
@end deffn

When executing, these commands take some time.  On larger files (some
MBs), you might have to wait a minute.

Hiding these XML internals makes sense not only regarding human
readability.  It also helps making the annotations syntactically
correct.  Starting or ending a markup range inside an XML tag or
character reference would result in an error or in invalid XML, when
internalized.  By hiding these internals, a markup range can never start
or end inside.

But hiding can result in bad performance of the editor. For solving
this, @ref{Performance}.

@node Performance, Saving annotations, Readability of XML source documents, Starting and quitting stand-off mode
@section Performance

Standoff mode generates tons of overlays.  Overlays are an Emacs
technique to alter the visual appearance of a buffer's text on the
screen, for the sake of presentation features.  Replacing XML character
references with the corresponding glyphs is done by overlays.  Showing
markup ranges in the source document is also done by overlays, since
they allow adding visual features and even characters while not changing
the underlying text.  (That's why the point can't be positioned over a
markup ranges' bounding bracket and number.  They are not really in the
buffers text, but only seem to be there.)

When working with larger XML files, the tons of overlays may slow down
Emacs significantly, even render it unusable.  But there is another
Emacs feature, to work around this: Narrowing the buffer down to a
portion of the file.  When you run into performance problems with
standoff mode, please try narrowing.

@deffn Command narrow-to-region REGION
@kindex C-x n n
(@kbd{C-x n n}) Narrow the buffer to the region.  The REGION must be
active when calling this command.  Calling it the first time, you will
be asked if you really want to activate the narrowing feature.
@end deffn

@deffn Command widen
@kindex C-x n w
(@kbd{C-x n w}) Widen narrowed buffer to see the full file again.
@end deffn

@xref{(Emacs)Narrowing}.


@node Saving annotations, Loading annotations, Performance, Starting and quitting stand-off mode
@section Saving annotations

Saving the external markup depends on the back-end, that is used in
standoff mode.

If the JSON file back-end is configured, the annotations are stored in a
separate buffer which references a file.  The default file name is the
file name of the source document plus the suffix @code{.json}. Saving is
done by switching to this buffer and saving the json-file. Before
quitting Emacs, the editor asks if modified buffers should be saved to
disk.

If the dummy back-end is configured, the annotations are kept in memory
only, while annotating the source document.  If Emacs quits, the
annotations are lost.  But they can be dumped to disk by calling a dump
command and they can be loaded from the dump file in the next session.

@deffn Command standoff-dump-elisp FILENAME
@kindex u
(@kbd{u}) (@emenu{Stand-Off->Dump to file (SAVE)}) Save the annotations
as s-expressions in a Emacs lisp file. You will be prompted for a
FILENAME.  It defaults to the file name of the source document, plus the
suffix @code{.dump.el}, since that's the name of the file that is
automatically loaded on activation.
@end deffn

Note, that this command is always present.  So, whatever back-end is
used, you're able to dump the annotations to local disk.  Use
@emph{standoff-tools} to generate various other formats from it:
@url{http://github.com/lueck/standoff-tools}.

@strong{Be aware to always dump your annotations, if the dummy back-end
is configured.  They can't be recovered otherwise.}

When working with a back-end, that stores the annotations on local disk,
it is recommended to use the JSON file back-end.  Reason: It always asks
you if you want to save your the json file before quitting Emacs.

@node Loading annotations, , Saving annotations, Starting and quitting stand-off mode
@end ifclear
@section Loading annotations

One of the following load commands is called automatically after
standoff mode is activated.  Which one, depends on the back-end used.
Automatic loading on activation succeeds, if a file matching the default
file name of the command (see below) is present.

The loading commands can even be called interactively by the user.  They
are neither bound to the menu nor to a key code, since calling them
unwittingly might damage your annotation data.  (Using the JSON backend,
there is only a minor risk.)

@deffn Command standoff-json-file/load-file FILENAME
Load annotations from a JSON file.  You will be prompted for the
FILENAME.  It defaults to the file name of the source document, plus the
suffix @code{.json}.
@end deffn

@deffn Command standoff-dummy-load-dumped FILENAME
Load annotations from a Emacs lisp file with dumped annotations.  You
will be prompted for a FILENAME.  It defaults to the file name of the
source document, plus the suffix @code{.dump.el}.
@end deffn


For more information on back-ends and configuration, @ref{Back-Ends}.

@node Markup elements, Relations, Starting and quitting standoff mode, Top
@chapter Markup elements

@node Relations, Attributes, Markup elements, Top
@chapter Relations

@node Attributes, Comments, Relations, Top
@chapter Attributes

@node Comments, Configuration, Attributes, Top
@chapter Comments

@node Configuration, GNU Free Documentation License, Comments, Top
@chapter Configuration


@menu
* Back-Ends::
* Annotation schema::
@end menu


@node Back-Ends, Annotation schema, , Configuration
@section Back-Ends

With standoff mode you have some options where to store you annotations
and in which format.  Storing annotations is done by a @dfn{back-end}.
Before working with standoff mode, it is required to choose a back-end.

The annotations can be stored in a file on the local disk or in a
central database.  The @dfn{JSON file back-end} and the dummy back-end
store them locally on disk.  The @dfn{JSON rest back-end} (under
development) stores them in a database communicating via a restful
web-service.

The JSON file back-end stores the annotations in JSON format, and the
names of keys of the JSON objects are configurable. The dummy back-end
stores the annotations as s-expressions known from programming languages
like LISP, in fact they are dumped Emacs-lisp expressions. The JSON rest
back-end uses JSON to communicate with the database.

Configuring, which back-end to use, is simple.  There are two ways: (1)
Customize the user option @code{standoff-backend}.  You are
automatically directed to the customization dialog if you try working
with stand-off mode without a back-end.  (2) Edit your Emacs startup
file by adding:
@vindex{standoff-backend}

@example
@code{(setq standoff-backend 'standoff-json-file)}
@end example

for using the JSON file back-end, or

@example
@code{(setq standoff-backend 'standoff-dummy)}


for using the dummy back-end.

@menu
* JSON file back-end::
* JSON rest back-end::
* Common settings on JSON back-ends::
* Dummy back-end::
* Writing new back-ends::
@end menu

@node JSON file back-end, JSON rest back-end, , Back-Ends
@subsection JSON file back-end



@node Annotation schema, , Back-Ends, Configuration
@section Annotation schema

@menu
* Using Emacs-lisp for defining an annotation schema::
* Generating an annotation schema from OWL::
@end menu


@node GNU Free Documentation License,  , Configuration, Top
@appendix GNU Free Documentation License
@documentlanguage en_US
@include fdl.texi
@bye

@c  LocalWords:  Emacs Meta kbd ifinfo xref
